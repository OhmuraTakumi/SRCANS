#####################################################################
##
## PYTHON VERSION OF DAC_READ.PRO IDL PROCEDURE
## FOR READING DAC FORMAT DATA GENERATED BY CANS+
## WRITTEN BY YOSUKE MATSUMOTO, CHIBA UNIV. (ymatumot@chiba-u.jp)
## Modified BY Takumi Ohmura
##
## USAGE:
## $ setenv PYTHONPATH $CANSPLUS_DIR/python
## $ python
##
## >>> from dac_read_mpiio import dac_read
##
## FOR 3D DATA
## >>> data, x, y, z = dac_read('0?00_ro_rank=*.dac',d=3)
##
#####################################################################
import numpy as np
from scipy.io import FortranFile
import glob
import os
def dacgetparam(file,name):

  f = open(file)

  for line in f:
    if len(line) >= 4:
      if line[0:4] == '#dac':
        strs=line.split()
        if strs[2] == name:
          mtype=int(strs[1])
          if mtype == 2:
            value=strs[3]
          if mtype == 4:
            value=int(strs[3])
          if mtype == 5:
            value=float(strs[3])
          break

  return value

def dacget1d(file):

  ff = FortranFile(file,"r")
  unity = ff.read_ints()
  mver  = ff.read_ints()
  mtype = ff.read_ints()
  mndim = ff.read_ints()
  mdim  = ff.read_ints()

  if mtype == 4:
    data = ff.read_ints(dtype=np.int32)
  if mtype == 5:
    data = ff.read_reals(dtype=np.float32)
  if mtype == 6:
    data = ff.read_reals(dtype=np.float64)

  return data

def dac_read3d(filename):

  flist = sorted(glob.glob(filename))
  if len(flist) == 0:
    print('No such file')
    return None, None, None, None

  dir = os.path.dirname(os.path.abspath(flist[0]))+'/'
#  gm  = dacgetparam(dir+'params_rank=0000.txt','gm')
  ix  = dacgetparam(dir+'params_rank=0000.txt','ix')
  jx  = dacgetparam(dir+'params_rank=0000.txt','jx')
  kx  = dacgetparam(dir+'params_rank=0000.txt','kx')
  # ip  = dacgetparam(dir+'params_rank=0000.txt','ip')  
  npe = dacgetparam(dir+'params_rank=0000.txt','mpisize')
  margin = dacgetparam(dir+'params_rank=0000.txt','margin')
  # dt = dacgetparam(dir+'params_rank=0000.txt','dtout')
  mpix = dacgetparam(dir+'params_rank=0000.txt','mpix')
  mpiy = dacgetparam(dir+'params_rank=0000.txt','mpiy')
  mpiz = dacgetparam(dir+'params_rank=0000.txt','mpiz')

  igx = ix*mpix-(mpix-1)*margin*2
  jgx = jx*mpiy-(mpiy-1)*margin*2
  kgx = kx*mpiz-(mpiz-1)*margin*2

  file = dir+'x.dac'
  x = np.fromfile(file,dtype=np.float64)
  file = dir+'y.dac'
  y = np.fromfile(file,dtype=np.float64)
  file = dir+'z.dac'
  z = np.fromfile(file,dtype=np.float64)

  nd = int(len(flist))
  data = np.zeros([nd,kgx,jgx,igx])

  for l in range(0,nd):
    mpirank=0
    temp = np.fromfile(flist[l],dtype=np.float64)
    temp = temp.reshape(kgx,jgx,igx)
    print('Reading...'+flist[l])
    data[l,:,:,:] = temp

  return (data[0:nd,margin:kgx-margin,margin:jgx-margin,margin:igx-margin], 
          x[margin:igx-margin],
          y[margin:jgx-margin],
          z[margin:kgx-margin])

def dac_read(filename,d=0):
  if d != 3 :
    print("Specify Dimension as d = 3")
    return None, None, None, None
  else:
    if d == 3:
      data, x, y, z = dac_read3d(filename)
      return data, x, y, z

  
